function Get-PEVersionInfo {
    param (
        [string]$FilePath
    )

    # Check if the file exists
    if (-not (Test-Path $FilePath)) {
        Write-Error "File not found: $FilePath"
        return
    }

    # Extract version info using built-in methods
    $file = Get-Item -Path $FilePath
    $fileVersion = $file.VersionInfo

    $info = @{
        'File Name'          = $fileVersion.FileName
        'File Version'       = $fileVersion.FileVersion
        'Product Name'       = $fileVersion.ProductName
        'Product Version'    = $fileVersion.ProductVersion
        'Company Name'       = $fileVersion.CompanyName
        'Original Filename'  = $fileVersion.OriginalFilename
        'Internal Name'      = $fileVersion.InternalName
    }

    # Display the extracted information
    Write-Host "`n--- PE Version Information ---`n"
    foreach ($key in $info.Keys) {
        Write-Host "$key : $($info[$key])"
    }
}

function Get-PEImportsExports {
    param (
        [string]$FilePath
    )

    # Check if the file exists
    if (-not (Test-Path $FilePath)) {
        Write-Error "File not found: $FilePath"
        return
    }

    # Open the file as a binary stream
    $fileStream = [System.IO.File]::OpenRead($FilePath)

    # Read the DOS header to locate the PE header
    $dosHeader = New-Object byte[] 64
    $fileStream.Read($dosHeader, 0, 64)

    # The PE header offset is at byte 60 of the DOS header
    $peHeaderOffset = [BitConverter]::ToInt32($dosHeader, 60)

    # Move to the PE header
    $fileStream.Seek($peHeaderOffset, [System.IO.SeekOrigin]::Begin)

    # Read the PE header signature (should be "PE\0\0")
    $peSignature = New-Object byte[] 4
    $fileStream.Read($peSignature, 0, 4)
    $peSignatureString = [System.Text.Encoding]::ASCII.GetString($peSignature)

    if ($peSignatureString -ne "PE`0`0") {
        Write-Error "Not a valid PE file."
        $fileStream.Close()
        return
    }

    # Read the COFF header (20 bytes)
    $coffHeader = New-Object byte[] 20
    $fileStream.Read($coffHeader, 0, 20)

    # Skip over the COFF header and read the optional header (first 96 bytes for a 32-bit PE, 112 for 64-bit PE)
    $optionalHeader = New-Object byte[] 96
    $fileStream.Read($optionalHeader, 0, 96)

    # Extract the entry point and data directory (which contains imports/exports info)
    $exportDirectoryRVA = [BitConverter]::ToInt32($optionalHeader, 96 + 28)
    $importDirectoryRVA = [BitConverter]::ToInt32($optionalHeader, 96 + 40)

    Write-Host "`n--- PE Exports (RVA: $exportDirectoryRVA) ---"
    if ($exportDirectoryRVA -eq 0) {
        Write-Host "No exports found."
    } else {
        Write-Host "Exports data located at RVA: $exportDirectoryRVA (processing this requires deeper PE parsing)."
    }

    Write-Host "`n--- PE Imports (RVA: $importDirectoryRVA) ---"
    if ($importDirectoryRVA -eq 0) {
        Write-Host "No imports found."
    } else {
        Write-Host "Imports data located at RVA: $importDirectoryRVA (processing this requires deeper PE parsing)."
    }

    # Close the file stream
    $fileStream.Close()
}

function Get-PEInfo {
    param (
        [string]$FilePath
    )

    # Get basic PE version information
    Get-PEVersionInfo -FilePath $FilePath

    # Extract PE headers for imports/exports
    Get-PEImportsExports -FilePath $FilePath
}

# Example usage:
Get-PEInfo -FilePath "C:\path\to\your\file.exe"
